<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
           http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       "
	default-autowire="byType">

	<!-- ============================ -->
	<!-- druid -->
	<!-- ============================ -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />

		<!-- ======================== -->
		<!-- 数据库连接配置信息 -->

		<property name="url" value="jdbc:mysql://192.168.0.250:3306/atobo?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="root" />

		<!-- ======================== -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 每隔5分钟将监控日志输出到日志文件中，单位是毫秒。 -->
		<property name="timeBetweenLogStatsMillis" value="300000" />

		<!-- 监控统计拦截的filters,日志记录 -->
		<property name="filters">
			<value>stat,wall,slf4j,logback</value>
		</property>

		<!-- 监控数据库 -->
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>

	</bean>




	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="statementExecutableSqlLogEnable" value="false" />
	</bean>

	<!-- 开启监控 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 超过1s为执行超时 -->
		<property name="slowSqlMillis" value="1" />
		<!-- 显示日志 -->
		<property name="logSlowSql" value="true" />
		<!-- sql 合并 -->
		<property name="mergeSql" value="true" />
	</bean>

	<!-- 日志记录 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="resultSetLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>

	<!-- 防止SQL注入 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<property name="config" ref="wall-filter-config" />
	</bean>

	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
		<property name="dir" value="META-INF/druid/wall/mysql" />
	</bean>

	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>

	<!-- ====================================== -->
	<!-- AOP 配置 -->
	<!-- ====================================== -->
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.apple.webx.persistence.*</value>
			</list>
		</property>
	</bean>

	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

	<!-- ====================================== -->
	<!-- sqlSessionFactory 配置 -->
	<!-- ====================================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/apple/webx/persistence/**/*Mapper*.xml" />
		<property name="typeAliasesPackage" value="com.apple.webx.domain.***" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="javax.annotation.Resource"></property>
		<property name="basePackage" value="com.apple.webx.persistence" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:annotation-config />
	<tx:advice id="defaultTxAdvice">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- ====================================== -->
	<!-- SQL 事务配置 -->
	<!-- ====================================== -->
	<tx:advice id="tpayTxAdvice">
		<tx:attributes>
			<tx:method name="receive*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE" />
			<tx:method name="add*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE" />
			<tx:method name="increase*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE" />
			<tx:method name="pay*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE" />
			<tx:method name="refund*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE" />
			<tx:method name="update*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="ao_bo"
			expression="(execution(* *..*BoImpl.*(..))) or ( execution(* *..*AoImpl.*(..)) and ( not execution(* *..*AoImpl.mtx_*(..)) ) )" />
		<aop:advisor pointcut-ref="ao_bo" advice-ref="defaultTxAdvice" />
	</aop:config>
</beans>